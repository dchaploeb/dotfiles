
# {{- if .gui -}} 
# {{- $brExe1 := (joinPath (env "ProgramFiles") "BraveSoftware" "Brave-Browser" "Application" "brave.exe") -}}
# {{- $brExe2 := (joinPath (env "LOCALAPPDATA") "BraveSoftware" "Brave-Browser" "Application" "brave.exe") -}}
# {{- $brExe  := "" -}}
# {{- if (stat $brExe1) -}} {{- $brExe = $brExe1 -}}
# {{- else if (stat $brExe2) -}} {{- $brExe = $brExe2 -}} {{- end -}}
# {{- $hasPy := or (lookPath "py") (lookPath "python") -}}
# {{- if and $brExe $hasPy }}

param (
    [string]$ShortcutDir = "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Custom Web Apps",
    [string]$IconCacheDir = "$env:LOCALAPPDATA\BraveShortcutIcons"
)

# --- chezmoi render guard (auto-skip if nothing changed) ---
$RenderHash = '{{- $tmpl := include "run_always_setup-brave-shortcuts.ps1.tmpl" -}}{{- $data := include ".chezmoidata/braveapps.yaml" -}}{{- sha256sum (printf "%s%s" $tmpl $data) -}}'
$OkDir  = Join-Path $HOME ".local/share/chezmoi/state"
$OkFile = Join-Path $OkDir  "setup-brave-shortcuts.ok"
function Get-LastHash {
  if (Test-Path $OkFile) {
    try { (Get-Content $OkFile -Raw | ConvertFrom-Json).hash } catch { $null }
  }
}
$LastHash = Get-LastHash
if ($LastHash -eq $RenderHash) {
  Write-Host "setup-brave-shortcuts: no changes (hash match), skipping."
  return
}
# --- end render guard ---

# --- dot-source Brave profile helpers ---
. "$HOME\bin\BraveProfiles.ps1"

# Resolve a Python exe and ensure Pillow
$python = $null
$cmd = Get-Command py -ErrorAction SilentlyContinue
if ($cmd) { $python = $cmd.Path } else {
  $cmd = Get-Command python -ErrorAction SilentlyContinue
  if ($cmd) { $python = $cmd.Path }
}
if ($python) {
  try { & $python -m pip --version | Out-Null } catch { & $python -m ensurepip --upgrade | Out-Null }
  & $python -c @'
import sys
try:
    import PIL
    sys.exit(0)
except Exception:
    sys.exit(1)
'@
  if ($LASTEXITCODE -ne 0) {
    & $python -m pip install --user --upgrade Pillow
  }
}

<# begin app loop #>
# {{- $apps := include ".chezmoidata/braveapps.yaml" | fromYaml -}}
# {{- range $apps.brave_apps }}
$name = "{{ .name }}"
$url = "{{ .url }}"
Write-output "Working on shortcut for $name"

$faviconUrl = $null
$domain = $null
$iconBase = $null
# {{- if (index . "iconurl") }}
$faviconUrl = "{{ .iconurl }}"
$iconBase = "custom_icon_{{ .name | replace " " "_" }}"
# {{- else }}
$icondomain = "{{ if (index . "icondomain") }}{{ .icondomain }}{{ else }}{{ .url }}{{ end }}"
$domain = ([uri]$icondomain).Host
$faviconUrl = "https://www.google.com/s2/favicons?sz=64&domain=$domain"
$iconBase = "$($domain.Replace('.', '_'))"
# {{- end }}

$extension = [System.IO.Path]::GetExtension($faviconUrl).ToLower()
$iconPng = Join-Path $IconCacheDir "$iconBase$extension"
$iconIco = Join-Path $IconCacheDir "$iconBase.ico"
$shortcutPath = Join-Path $ShortcutDir "$name.lnk"

if (-not (Test-Path $iconPng)) {
    try {
        Invoke-WebRequest -Uri $faviconUrl -OutFile $iconPng -ErrorAction Stop
    } catch {
        Write-Warning "Failed to fetch icon for $name"
    }
}
if ($extension -ne ".ico" -and (Test-Path $iconPng) -and (-not (Test-Path $iconIco))) {
    try {
        if ($python) {
            & $python "$HOME\bin\convert_png_to_ico.py" "$iconPng" "$iconIco"
        } else {
            Write-Warning "No Python; using PNG as-is for $name"
        }
    } catch {
        Write-Warning "Failed to convert favicon for $name to ICO"
    }
} elseif ($extension -eq ".ico") {
    if ($iconPng -ne $iconIco) {
        Copy-Item $iconPng $iconIco -Force
    }
}

$braveExe = "$env:ProgramFiles\BraveSoftware\Brave-Browser\Application\brave.exe"
if (-not (Test-Path $braveExe)) {
    $braveExe = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\Application\brave.exe"
}
if (-not (Test-Path $braveExe)) {
    Write-Error "Brave executable not found"
    return
}

$displayName = "{{- .profile -}}"
$folderName = Ensure-BraveProfile $displayName
if (-not $folderName) {
    Write-Warning "Unable to provision a Brave profile for '$displayName'"; return
}

$WshShell = New-Object -ComObject WScript.Shell
$shortcut = $WshShell.CreateShortcut($shortcutPath)
$shortcut.TargetPath = $braveExe
$shortcut.Arguments = "--profile-directory=""$folderName"" --app=$url"
$shortcut.IconLocation = if (Test-Path $iconIco) { "$iconIco,0" } else { "$shortcut.TargetPath,0" }
$shortcut.Save()
Write-Output "Created/updated shortcut: $name"
Write-Output "Icon was used from $($shortcut.IconLocation)"
# {{- end }}
<# end app loop #>

Write-Host "`n=== Final Brave profile state ==="
$ls = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Local State"
if (Test-Path $ls) {
    try {
        $root = Get-Content $ls -Raw | ConvertFrom-Json
        $info = $root.profile.info_cache
        if ($info) {
            foreach ($k in $info.PSObject.Properties.Name) {
                $name = $info.$k.name
                Write-Host ("{0,-12} â†’ {1}" -f $k, $name)
            }
        } else {
            Write-Host "info_cache is empty or missing."
        }
    }
    catch {
        Write-Warning "Could not parse Local State: $($_.Exception.Message)"
    }
} else {
    Write-Host "Local State file not found."
}

if (-not $Error -or $Error.Count -eq 0) {
  New-Item -ItemType Directory -Force (Split-Path $OkFile) | Out-Null
  @{ hash = $RenderHash; when = (Get-Date).ToString("o") } |
    ConvertTo-Json | Set-Content -Path $OkFile -Encoding UTF8
  Write-Host "setup-brave-shortcuts: success, recorded new hash."
} else {
  Write-Warning "setup-brave-shortcuts: errors present; not updating hash."
}


# {{- end -}}
# {{ end }}