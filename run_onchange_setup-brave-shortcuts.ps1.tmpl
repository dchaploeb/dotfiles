{{- if .gui -}} 

param (
    [string]$ShortcutDir = "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Custom Web Apps",
    [string]$IconCacheDir = "$env:LOCALAPPDATA\BraveShortcutIcons"
)
 
function Resolve-BraveProfileFolderName {
    param (
        [Parameter(Mandatory = $true)]
        [string]$DisplayName
    )

    $localStatePath = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Local State"

    if (-not (Test-Path $localStatePath)) {
        Write-Error "Local State file not found."
        return $null
    }

    $json = Get-Content $localStatePath -Raw | ConvertFrom-Json
    $infoCache = $json.profile.info_cache

    foreach ($folder in $infoCache.PSObject.Properties.Name) {
        $profileInfo = $infoCache.$folder
        $name = $profileInfo.name
        if ($name -eq $DisplayName) {
            return $folder
        }
    }

    Write-Error "Could not find Brave profile with display name '$DisplayName'"
    return $null
}

function Set-BraveProfileDisplayName {
    # This is completely unsupported and will cause everything you touch to turn to hair.

    param (
        [string]$folderName,
        [string]$desiredDisplayName
    )

    $localStatePath = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Local State"
    if (-not (Test-Path $localStatePath)) {
        Write-Error "Local State file not found, cannot rename profile."
        return
    }

    $json = Get-Content $localStatePath -Raw | ConvertFrom-Json
    if (-not $json.profile.info_cache.$folderName) {
        Write-Error "No info_cache entry for $folderName"
        return
    }

    $json.profile.info_cache.$folderName.name = $desiredDisplayName
    $json | ConvertTo-Json -Depth 10 | Set-Content -Encoding UTF8 $localStatePath
    Write-Output "Renamed Brave profile $folderName to '$desiredDisplayName'"
}


<#
{{- $apps := include ".chezmoidata/braveapps.yaml" | fromYaml -}}
#>

# Generated by chezmoi from braveapps.yaml


New-Item -ItemType Directory -Force -Path $ShortcutDir | Out-Null
New-Item -ItemType Directory -Force -Path $IconCacheDir | Out-Null

$WshShell = New-Object -ComObject WScript.Shell

<# begin app loop #>
{{- range $apps.brave_apps }}
$name = "{{ .name }}"
$url = "{{ .url }}"

Write-output "Working on shortcut for $name"
# Reset icon-related vars
$faviconUrl = $null
$domain = $null
$iconBase = $null

{{- if (index . "iconurl") }}
$faviconUrl = "{{ .iconurl }}"
$iconBase = "custom_icon_{{ .name | replace " " "_" }}"
{{- else }}
$icondomain = "{{ if (index . "icondomain") }}{{ .icondomain }}{{ else }}{{ .url }}{{ end }}"
$domain = ([uri]$icondomain).Host
$faviconUrl = "https://www.google.com/s2/favicons?sz=64&domain=$domain"
$iconBase = "$($domain.Replace('.', '_'))"
{{- end }}

$extension = [System.IO.Path]::GetExtension($faviconUrl).ToLower()

$iconPng = Join-Path $IconCacheDir "$iconBase$extension"
$iconIco = Join-Path $IconCacheDir "$iconBase.ico"

$shortcutPath = Join-Path $ShortcutDir "$name.lnk"

# Download if not cached
if (-not (Test-Path $iconPng)) {
    try {
        Invoke-WebRequest -Uri $faviconUrl -OutFile $iconPng -ErrorAction Stop
    } catch {
        Write-Warning "Failed to fetch icon for $name"
    }
}

# Convert PNG to ICO only if needed
if ($extension -ne ".ico" -and (Test-Path $iconPng) -and (-not (Test-Path $iconIco))) {
    try {
        python $home/bin/convert_png_to_ico.py "$iconPng" "$iconIco"
    } catch {
        Write-Warning "Failed to convert favicon for $name to ICO"
    }
} elseif ($extension -eq ".ico") {
    if ($iconPng -ne $iconIco) {
        Copy-Item $iconPng $iconIco -Force
    }
}


# Resolve or create profile

$braveExe = "$env:ProgramFiles\BraveSoftware\Brave-Browser\Application\brave.exe"
if (-not (Test-Path $braveExe)) {
    $braveExe = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\Application\brave.exe"
}
if (-not (Test-Path $braveExe)) {
    Write-Error "Brave executable not found"
    return
}

$displayName = "{{- .profile -}}"
# Try to resolve
$folderName = Resolve-BraveProfileFolderName $displayName

# If it doesn't exist, seed it
if (-not $folderName) {
    Write-Output "Seeding Brave profile for '$displayName'"

    $folderNameGuess = "Profile $displayName"
    $profileDirPath = Join-Path "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data" $folderNameGuess

    # Create the folder explicitly if it doesn't exist
    if (-not (Test-Path $profileDirPath)) {
        New-Item -ItemType Directory -Path $profileDirPath | Out-Null
    }

    # Ensure no existing Brave process interferes
    Get-Process brave* -ErrorAction SilentlyContinue | Stop-Process -Force
    Start-Sleep -Milliseconds 500

    # Launch Brave directly into that profile with a known URL
    Start-Process $braveExe -ArgumentList "--user-data-dir=`"$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data`" --profile-directory=`"$folderNameGuess`" --new-window brave://settings/" -WindowStyle Hidden
    Start-Sleep -Seconds 4

    # Kill it again
    Get-Process brave* -ErrorAction SilentlyContinue | Stop-Process -Force

    # Try setting the display name
    Set-BraveProfileDisplayName -folderName $folderNameGuess -desiredDisplayName $displayName

    # Try resolving it again
    $folderName = Resolve-BraveProfileFolderName $displayName

    if (-not $folderName) {
        Write-Warning "Unable to resolve Brave profile '$displayName' even after creation"
        return
    }
}




# Create shortcut
$shortcut = $WshShell.CreateShortcut($shortcutPath)
$shortcut.TargetPath = $braveExe
$shortcut.Arguments = "--profile-directory=""$folderName"" --app=$url"
$iconLocation =  if (Test-Path $iconIco) { "$iconIco,0" } else { "$shortcut.TargetPath,0" }
$shortcut.IconLocation = $iconLocation
$shortcut.Save()
Write-Output "Created/updated shortcut: $name"
Write-Output "Icon was used from $iconLocation"

{{- end }}
<# end app loop #>
{{ end }}